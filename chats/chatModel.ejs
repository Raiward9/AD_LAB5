<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebSocket Client</title>
    <link rel="stylesheet" href="/CSS/chat.css">
</head>
<body>
    <div class="chat-card">
        <div class="chat-header">
            <div class="h2">Chat</div>
        </div>
        <div id ="chat-body" class="chat-body">
        
            
        </div>
        <div class="chat-footer">
            <input id="messageInput" placeholder="Type your message" type="text">

            <button id="sendButton">Send</button>
            
        </div>
        <input id="imageInput" type="file">
    </div>

    <script>
        let messages_history = [];
        // Esperamos a que el DOM esté completamente cargado
        document.addEventListener("DOMContentLoaded", function() {
            // Conectar al servidor WebSocket
            let userId = "<%= user %>"; // Esto debería reemplazarse por el valor real del servidor
            const ws = new WebSocket(`ws://localhost:8765?chat=1&userId=${userId}`);

            async function fetchMessages() {
                try {
                    const response = await fetch('/chat/1/messages/100', {
                        method: 'GET',
                    });
                    
                    // Verifica si la respuesta fue exitosa (código de estado 200)
                    if (response.ok) {
                        const data = await response.json();  // Convierte la respuesta a JSON
                        //console.log("Messages retrieved:", data);  // Muestra los mensajes obtenidos
                        return data;  // Devuelve los datos
                    } else {
                        console.error("Failed to fetch messages. Status:", response.status);
                    }
                } catch (error) {
                    console.error("Error retrieving messages:", error);
                }
            }


            (async function() {
                dbMessages = await fetchMessages();
                dbMessages.forEach(message => {
                    //console.log(message);
                    const outputDiv = document.getElementById("chat-body");
                    const newMessage = createMessage(message.username, userId)
                    
                    let messageContent;
                    messageContent = createTextMessageContent(messageContent, message.username, message.message, message.type, messages_history)
                    
                    newMessage.appendChild(messageContent);
                    outputDiv.appendChild(newMessage); // Añadir el mensaje al div correspondiente

                    scrollToBottom()
                });
            })();

            // Cuando la conexión esté abierta
            ws.onopen = () => {
                console.log("Connected to server");
            };

            // Recibir mensajes del servidor
            ws.onmessage = async (event) => {
                // console.log('Received message:', event.data);
                const data = JSON.parse(event.data); 
                const outputDiv = document.getElementById("chat-body");
                
                // Crear el mensaje a mostrar
                const newMessage = createMessage(data.userId, userId)
                
                let messageContent;
                if (data.type == "text") {
                    messageContent = createTextMessageContent(messageContent, data.userId, data.message, "text", messages_history)
                }
                else if(data.type == "image") {

                    const blobUrl = generateBlobUrl(data)
                    
                    messageContent = document.createElement("div");
                    const imgElement = createImageElement(blobUrl, data.userId)
                    const senderInfo = createSenderInfo(data)

                    messageContent.appendChild(imgElement);
                    messageContent.appendChild(senderInfo);

                    messages_history.push({user: data.userId, type: "image", message: imgElement.src });
                }
                
                console.log(messageContent)
                newMessage.appendChild(messageContent);
                outputDiv.appendChild(newMessage); // Añadir el mensaje al div correspondiente

                if (messages_history.length > 100) {
                    messages_history.shift();
                    outputDiv.innerHTML = ''; // Limpiar el div
                
                    // Añadir los últimos 10 mensajes al div
                    messages_history.forEach(messageHist => {
                        const newMessage = createMessage(data.userId, userId)
                        
                        let messageContent;
                        if (messageHist.type == "text") {
                            messageContent = document.createElement("p");
                            messageContent.textContent = messageHist.message;
                        }
                        else if(messageHist.type == "image") {
                            messageContent = document.createElement("div");

                            const imgElement = createImageElement(messageHist.message, data.userId)
                            const senderInfo = createSenderInfo(data)

                            messageContent.appendChild(imgElement);
                            messageContent.appendChild(senderInfo);
                        }
                        
                        newMessage.appendChild(messageContent);
                        outputDiv.appendChild(newMessage);
                    });
                }

                scrollToBottom()
            };

            // Cuando la conexión se cierre
            ws.onclose = () => {
                console.log("Disconnected from server");
            };

            // Manejar errores de WebSocket
            ws.onerror = (error) => {
                console.error("WebSocket error:", error);
            };

            function createMessage (dataUserId, userId) {
                const newMessage = document.createElement("div");
                if (dataUserId === userId) {
                    newMessage.classList.add("message", "outgoing");
                } else {
                    newMessage.classList.add("message", "incoming");
                }

                return newMessage
            }

            function createTextMessageContent (messageContent, dataUserId, dataMessage, dataType, messages_history) {
                messageContent = document.createElement("p");
                messageContent.textContent = `${dataUserId} : ${dataMessage}`;

                // Añadir el nuevo mensaje al array
                messages_history.push({user: dataUserId, type: dataType, message: messageContent.textContent});

                return messageContent
            }

            function generateBlobUrl(data) {
                const binary = atob(data.content)
                const array = new Uint8Array(binary.length)
                for (let i = 0; i < binary.length; ++i) {
                    array[i] = binary.charCodeAt(i)
                }
                const blob = new Blob([array], { type: `image/${data.mimeType}` })
                const blobUrl = URL.createObjectURL(blob)

                return blobUrl
            }

            function createSenderInfo(data) {
                // const senderInfo = createSenderInfo(data.userId)
                const senderInfo = document.createElement("p");
                senderInfo.textContent = `Sent by: ${data.userId}`;
                senderInfo.style.fontSize = "12px"; // Ajustar estilo para el texto del remitente
                senderInfo.style.color = "#666";

                return senderInfo
            }

            function createImageElement(src, userId) {
                const imgElement = document.createElement("img");
                imgElement.src = src;
                imgElement.setAttribute("alt", `Sent by ${userId}`);

                return imgElement
            }

            function scrollToBottom() {
                const chatContainer = document.getElementById('chat-body')
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            let selectedFile = null
            document.getElementById("imageInput").addEventListener("change", (event) => {
                if (event.target.files.length > 0)
                    selectedFile = event.target.files[0]
                console.log(selectedFile)
            })

            function fileToBase64(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result.split(",")[1])
                    reader.onerror = reject
                    reader.readAsDataURL(file)
                })
            }


            // Enviar mensajes
            document.getElementById("sendButton").addEventListener("click", async () => {
                console.log('Sending message...');
                const messageInput = document.getElementById("messageInput");
                const message = messageInput.value;
                
                const fileInput = document.getElementById("imageInput");

                if (message) {
                    const messageWebSocket = {
                        type: "text",
                        content: message,
                        userId: userId
                    };
                    ws.send(JSON.stringify(messageWebSocket)); // Enviar mensaje al servidor
                    messageInput.value = ""; // Limpiar el campo de mensaje
                }
                else if(selectedFile) {
                    try {
                        const mimeType = selectedFile.name.split('.')[1]
                        const imageBase64 = await fileToBase64(selectedFile)

                        const messageWebSocket = {
                            type: "image",
                            content: imageBase64,
                            userId: userId,
                            mimeType: mimeType
                        }


                        ws.send(JSON.stringify(messageWebSocket))
                        fileInput.value = "";
                    } catch (error) {
                        console.log("Error reading the file:", error)
                    }
                }
            });
        });
    </script>
</body>
</html>
